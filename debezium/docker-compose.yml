version: '3.9'
services:
  zookeeper:
    image: debezium/zookeeper:1.4
    networks:
      - debezium-docker-net
    ports:
      - '2181:2181'
      - '2888:2888'
      - '3888:3888'
    environment: 
      - TZ=Asia/Seoul
  kafka:
    image: debezium/kafka:1.4
    networks:
      - debezium-docker-net
    ports:
      - '9092:9092'
    # volumes:
    #   - './volumes/container_data/kafka:/kafka/data'
    depends_on:
      - zookeeper
    environment:
      - TZ=Asia/Seoul
      - ZOOKEEPER_CONNECT=zookeeper:2181/kafka
  akhq:
    image: tchiotludo/akhq:0.17.0
    ports:
      - '8080:8080'
    volumes:
      - './volumes/akhq/application.yml:/app/application.yml'
    networks:
      - debezium-docker-net
  mysql:
    build:
      context: mysql_example
    networks:
      - debezium-docker-net
    ports:
      - '3306:3306'
    volumes:
      - './volumes/container_data/mysql:/var/lib/mysql'
    environment:
      - TZ=Asia/Seoul
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=debezium
      - MYSQL_PASSWORD=debeziumpw
  connect1:
    build:
      context: kafka_connect
    networks:
      - debezium-docker-net
    ports:
      - '8083:8083'
      - '1976:1976'
    depends_on:
      - zookeeper
      - kafka
      - mysql
    environment:
      - TZ=Asia/Seoul
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=connect-cluster-A
      - CONFIG_STORAGE_TOPIC=connect.configs
      - OFFSET_STORAGE_TOPIC=connect.offsets
      - STATUS_STORAGE_TOPIC=connect.statuses
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - OFFSET_FLUSH_TIMEOUT_MS=60000
      - KAFKA_OPTS=-javaagent:/kafka/jmx_prometheus_javaagent.jar=8080:/kafka/metrics-config.yml
      - JMX_PORT=1976 # prometheus 사용을 위한 JMX 포트
  connect2:
    build:
      context: kafka_connect
    networks:
      - debezium-docker-net
    ports:
      - '8084:8083'
      - '1977:1977'
    depends_on:
      - zookeeper
      - kafka
      - mysql
    environment:
      - TZ=Asia/Seoul
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=connect-cluster-A
      - CONFIG_STORAGE_TOPIC=connect.configs
      - OFFSET_STORAGE_TOPIC=connect.offsets
      - STATUS_STORAGE_TOPIC=connect.statuses
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - OFFSET_FLUSH_TIMEOUT_MS=60000
      - KAFKA_OPTS=-javaagent:/kafka/jmx_prometheus_javaagent.jar=8080:/kafka/metrics-config.yml
      - JMX_PORT=1977 # prometheus 사용을 위한 JMX 포트
  prometheus:
    build:
      context: prometheus
    networks:
      - debezium-docker-net
    ports:
      - '9090:9090'
  grafana:
    build:
      context: grafana
    networks:
      - debezium-docker-net
    ports:
      - '3000:3000'
    environment: 
      - DS_PROMETHEUS=prometheus

networks: 
  debezium-docker-net:
    external:
      name: debezium-docker-net
